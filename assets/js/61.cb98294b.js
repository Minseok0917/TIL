(window.webpackJsonp=window.webpackJsonp||[]).push([[61],{298:function(t,s,n){"use strict";n.r(s);var e=n(14),a=Object(e.a)({},(function(){var t=this,s=t._self._c;return s("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[s("h2",{attrs:{id:"새벽-가상돔-처리-정리"}},[t._v("새벽-가상돔 처리 정리")]),t._v(" "),s("p",[t._v("잠도 좀 잤고, 재택이라서 지하철 타는 시간을 절약할 수 있기 때문,"),s("br"),t._v("\n샤워하면서 대략 정리하고, 가상돔 구현해야는 기능을 차근차근 적었다."),s("br"),t._v("\n이전에 "),s("code",[t._v("updateElement")]),t._v(" 함수를 구현하기 위해 정리하는 내용이다.")]),t._v(" "),s("h3",{attrs:{id:"node-객체-구조"}},[t._v("Node 객체 구조")]),t._v(" "),s("p",[t._v("JSX 문법이 JS 로 "),s("strong",[t._v("트랜스 파일링")]),t._v("되서 element 구조가 Object 구조로 이루어져 있는 객체")]),t._v(" "),s("p",[t._v("::: warning 구조")]),t._v(" "),s("ul",[s("li",[t._v("tag : element tag name")]),t._v(" "),s("li",[t._v("config : element attributes")]),t._v(" "),s("li",[t._v("children : element child elements\n:::")])]),t._v(" "),s("h3",{attrs:{id:"node-type"}},[t._v("Node Type")]),t._v(" "),s("p",[s("code",[t._v("updateElement")]),t._v(" 를 재귀로 호출하면 결국 특정상황 일때 조건으로 "),s("code",[t._v("생성")]),t._v(", "),s("code",[t._v("수정")]),t._v(", "),s("code",[t._v("삭제")]),t._v(" 를 구현해야한다."),s("br"),t._v(" "),s("code",[t._v("oldNode")]),t._v("와 "),s("code",[t._v("newNode")]),t._v("의 "),s("strong",[t._v("children")]),t._v(" 으로 "),s("code",[t._v("updateElement")]),t._v("를 재귀를 돌면 여러가지 타입이 나온다.")]),t._v(" "),s("p",[t._v("::: tip 종류")]),t._v(" "),s("ul",[s("li",[t._v("undefined : 값이 입력되지 않음")]),t._v(" "),s("li",[t._v("string, nubmer : Dom Text")]),t._v(" "),s("li",[t._v("object : Node 객체\n:::")])]),t._v(" "),s("h3",{attrs:{id:"node-수정"}},[t._v("Node 수정")]),t._v(" "),s("p",[t._v("::: warning 처리 방안")]),t._v(" "),s("ul",[s("li",[t._v("tag : "),s("code",[t._v("oldNode")]),t._v(", "),s("code",[t._v("newNode")]),t._v(" 태그의 값이 서로 일치 하지 않으면 새로운 객체로 바꿔줘야 한다.")]),t._v(" "),s("li",[t._v("config : "),s("code",[t._v("oldNode")]),t._v(", "),s("code",[t._v("newNode")]),t._v(" config 값을 함수를 만들어서 기존객체를 수정하는 방안으로 생각하고 있다.")]),t._v(" "),s("li",[t._v("children : "),s("code",[t._v("updateElement")]),t._v(" 함수를 이용해서 children Node 재귀를 돌려서 끝까지 반복한다.\n:::")])]),t._v(" "),s("h2",{attrs:{id:"새벽-정리"}},[t._v("새벽-정리")]),t._v(" "),s("p",[t._v("현재 글은 다른 사람눈을 고려하지 않고 짜서 이해하기 어려울 수 있다."),s("br"),t._v("\n나중에 가상돔 구현에 대한 글을 자세히 적어서 글을 써야겠다.")]),t._v(" "),s("p",[t._v("위 내용을 정리하면 "),s("code",[t._v("oldNode")]),t._v(", "),s("code",[t._v("newNode")]),t._v(" 의 Type 으로 특정 상황을 구분할 수 있다."),s("br"),t._v("\n아래 코드와 같이 "),s("code",[t._v("undefined")]),t._v(" 로는 "),s("code",[t._v("생성")]),t._v(", "),s("code",[t._v("삭제")]),t._v("를 구분할 수 있고,"),s("br"),t._v(" "),s("code",[t._v("string")]),t._v(", "),s("code",[t._v("number")]),t._v(" 로는 "),s("code",[t._v("text")]),t._v(" 인지 파악할 수 있다."),s("br"),t._v("\n코드를 보면 알겠지만 어떻게 처리할지만 흐름만 설계했다."),s("br"),t._v("\n자고 일어나서 일하고 if문 내부 구조를 짤 예정이다.")]),t._v(" "),s("div",{staticClass:"language-js extra-class"},[s("div",{staticClass:"highlight-lines"},[s("br"),s("div",{staticClass:"highlighted"},[t._v(" ")]),s("br"),s("br"),s("br"),s("br"),s("br"),s("br"),s("br"),s("br"),s("br"),s("div",{staticClass:"highlighted"},[t._v(" ")]),s("br"),s("br"),s("br"),s("br"),s("br"),s("br"),s("br"),s("br"),s("br"),s("br"),s("div",{staticClass:"highlighted"},[t._v(" ")]),s("div",{staticClass:"highlighted"},[t._v(" ")]),s("br"),s("br"),s("br"),s("br"),s("br"),s("div",{staticClass:"highlighted"},[t._v(" ")]),s("div",{staticClass:"highlighted"},[t._v(" ")]),s("br"),s("br"),s("br"),s("br"),s("br"),s("br"),s("br"),s("br"),s("br"),s("br"),s("br"),s("br")]),s("pre",{pre:!0,attrs:{class:"language-js"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("updateElement")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("$container"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" oldNode"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" newNode"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" index "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")])]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// Create, Delete")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" isCreate "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("!")]),t._v("oldNode "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&&")]),t._v(" newNode"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" isDelete "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" oldNode "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&&")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("!")]),t._v("newNode"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("isCreate"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("isDelete"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// TextNode")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" oldNodeType "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("typeof")]),t._v(" oldNode"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" newNodeType "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("typeof")]),t._v(" newNode"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" isTextNode "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v("\n            oldNodeType "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("===")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"string"')]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("||")]),t._v("\n            "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("oldNodeType "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("===")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"number"')]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&&")]),t._v(" newNodeType "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("===")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"string"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("||")]),t._v("\n            newNodeType "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("===")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"number"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("isTextNode"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// Node")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n            "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// Replace")]),t._v("\n            "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" isReplace "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" oldNode"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("tag "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("!==")]),t._v(" newNode"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("tag"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n            "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("isReplace"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n            "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// updateAttributes();")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n            "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// Recursion")]),t._v("\n            "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" max "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" Math"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("max")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("\n                oldNode"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("children"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("length"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n                newNode"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("children"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("length\n            "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n            "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("for")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" idx "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" idx "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v(" max"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" idx"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("++")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n                "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("updateElement")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n            "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),s("h2",{attrs:{id:"저녁-가상돔-처리"}},[t._v("저녁-가상돔 처리")]),t._v(" "),s("p",[s("code",[t._v("updateElement")]),t._v(" 함수의 4번째 매개변수 이름을 index => childIndex 로 바꿨다."),s("br"),t._v("\n이유는 삭제해야 될 경우 삭제할 index 를 찾지 못하기 떄문이다."),s("br"),t._v("\n현재 환경 셋팅으로 "),s("code",[t._v("TextNode")]),t._v(" 값이 계속 바뀌게 짜야하는데"),s("br"),t._v("\n숫자가 있을 경우 위에 "),s("code",[t._v("Create")]),t._v(", "),s("code",[t._v("Delete")]),t._v(" 부분에서 자꾸 true 로 걸려서"),s("br"),t._v("\nTextNode 를 위로 올리기로 했다. "),s("s",[s("code",[t._v("이래서 타입검사가 중요함 undefined 검사하기 싫어서 그냥 올림")])]),s("br"),t._v("\n그리고 고민인게 oldNode 와 newNode 텍스트 값이 서로 다를 경우에 바꿔야 하나 싶기도 하다."),s("br"),t._v("\n이걸 실행하려면 검사 로직이 하나 더 필요하기 때문이다."),s("br"),t._v("\n뭐 3항 연산자를 쓰면 보기좋게 쓸 수 있을거 같기도 하다."),s("br"),t._v("\n값을 바꾸는거 까진 했으나, useState 가 계속 변경이 안되서 한 번 밖에 전환이 안된다 "),s("code",[t._v("Issue")]),s("br"),t._v("\n내일 고칠 예정이다.")])])}),[],!1,null,null,null);s.default=a.exports}}]);