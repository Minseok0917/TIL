(window.webpackJsonp=window.webpackJsonp||[]).push([[685],{923:function(t,e,v){"use strict";v.r(e);var n=v(14),_=Object(n.a)({},(function(){var t=this,e=t._self._c;return e("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[e("h2",{attrs:{id:"_10시-기상"}},[t._v("10시 기상")]),t._v(" "),e("p",[t._v("아침에 일어나서 바깥 공기 30초 정도 마시고 집으로 들어왔다."),e("br"),t._v("\n아침은 귀찮아서 왕소라라는 과자 먹었다. 칼로리가 500kcal")]),t._v(" "),e("h2",{attrs:{id:"nuxt3"}},[t._v("Nuxt3")]),t._v(" "),e("h3",{attrs:{id:"universal-rendering"}},[t._v("Universal Rendering")]),t._v(" "),e("p",[t._v("Universal Rendering 은 간단하게 살펴봤는데 대략 정리를 하자면 이렇다.")]),t._v(" "),e("ul",[e("li",[t._v("SSR 의 장점인 SEO 와 HTML 반환으로 첫 화면 렌더링을 빠르게 가져간다.")]),t._v(" "),e("li",[t._v("첫 화면 렌더링을 완료하고 JS 읽어서 HTML 에 이벤트와 API 를 연동한다.")]),t._v(" "),e("li",[t._v("이 과정에서 기존 정적 HTML 에 이벤트와 API 를 연결하는것을 hydration 이라고 한다.")])]),t._v(" "),e("h3",{attrs:{id:"fetch-usefetch-useasyncdata"}},[t._v("$fetch, useFetch, useAsyncData")]),t._v(" "),e("p",[t._v("nuxt 에서 $fetch 는 전역에서 사용 가능한데 ofetch 라는 라이브러리를 사용해서 구현했다."),e("br"),t._v("\naxios 를 사용하지 않은 이유는 node.js 환경에서 호환시키기 번거롭기 때문이라고 한다."),e("br"),t._v("\nofetch 는 node, broswer 환경을 알아서 잘 분리해서 동작하기에 ofetch를 도입한거다.")]),t._v(" "),e("p",[t._v("$fetch 를 setup function 바로 시작되는 부분에 동작을 시켰을 때 2번 호출하는 문제가 발생한다."),e("br"),t._v("\n1번째는 SSR 환경에서 실행되고, 2번째는 CSR 환경에서 실행된다. (이 방법을 해결하는 방법이 있다.)"),e("br"),t._v("\nuseAsyncData 또는 useFetch 를 사용하면 간단하게 해결할 수 있다.")]),t._v(" "),e("p",[t._v("$fetch 를 고차함수화 시킨 useAsyncData 는 키값을 받는데 해당 키값으로 중복검사를 해서 한 번만 호출하게 한다."),e("br"),t._v("\nuseAsyncData 같은 경우에는 callback 함수로 API 를 호출하는데 React 의 useState Callback과 비슷한 동작을 한다."),e("br"),t._v("\nuseAsyncData 을 응요해서 useFetch 를 만들었는데 얘는 특징이 baseURL 과 interceptors 설정을 할 수 있다."),e("br"),t._v("\nuseFetch 또 다른 특징은 body, params, query 의 반응성 객체를 넣으면 값 변경을 감지해서 알아서 API 를 재 호출한다.")]),t._v(" "),e("p",[t._v("[요약]"),e("br"),t._v("\n$fetch를 이용해서 useAsyncData 를 만들었고"),e("br"),t._v("\nuseAsyncData 를 이용해서 useFetch 를 만들었다.")]),t._v(" "),e("p",[t._v("$fetch 는 웬만해선 단일성으로 사용할 일은 없어보인다."),e("br"),t._v("\nuseAsyncData 또한 웬만해선 자주 사용할 것 같진 않다 (왜냐하면 baseURL 과 intereceptos 설정이 없거든)"),e("br"),t._v("\nuseFetch 를 주로 사용하게 될 것같다.")]),t._v(" "),e("p",[t._v("[참고]")]),t._v(" "),e("ul",[e("li",[e("a",{attrs:{href:"https://jongmin4943.tistory.com/entry/Nuxt-%EC%9D%98-Universal-Rendering-%EC%9D%B4%EB%9E%80-%EB%AC%B4%EC%97%87%EC%9D%B8%EA%B0%80?category=1041674",target:"_blank",rel:"noopener noreferrer"}},[t._v("Universal Rendering"),e("OutboundLink")],1)]),t._v(" "),e("li",[e("a",{attrs:{href:"https://jongmin4943.tistory.com/entry/Nuxt3-fetch-useAsyncData-useFetch-%EC%9D%98-%EC%B0%A8%EC%9D%B4",target:"_blank",rel:"noopener noreferrer"}},[t._v("$fetch, useFetch, useAsyncData"),e("OutboundLink")],1)])]),t._v(" "),e("h2",{attrs:{id:"칼바람-낮잠"}},[t._v("칼바람 ~ 낮잠")]),t._v(" "),e("p",[t._v("Nuxt3 관련 글 좀 읽고 오늘 뭐 할지 적다가 칼바람 몇 판 달렸다."),e("br"),t._v("\n칼바람 몇 판 하니깐 갑자기 졸려서 낮잠을 잤는데 5시까지 자버렸다.")]),t._v(" "),e("h2",{attrs:{id:"저녁-디코"}},[t._v("저녁 ~ 디코")]),t._v(" "),e("p",[t._v("자고 일어나서 저녁 몇 시에 먹는지 대충 듣고 회사 프로젝트 클론해서 가져왔다."),e("br"),t._v("\n갑자기 회사 프로젝트를 가져온 이유는 오늘의 목적과도 같다. (공통 체계를 잡는것)")]),t._v(" "),e("p",[t._v("대충 세팅하다가 저녁 먹을 시간되서 라볶이와 감자전을 먹고 방으로 돌아왔다."),e("br"),t._v("\n그래도 또 코딩을 하려고 했는데 디코에서 능반 얘들끼리 떠들어서 같이 디코했다."),e("br"),t._v("\n디코하다가 뭐 예전 이야기나와서 그거 또 이야기하다가 시간이 많이 지나있었다.")]),t._v(" "),e("p",[t._v("디코하고 칼바람좀 하다가 서로 해산했다.")]),t._v(" "),e("h2",{attrs:{id:"nuxt-체계"}},[t._v("Nuxt 체계")]),t._v(" "),e("p",[t._v("나의 오늘의 목적은 Nuxt API 관련 타입 이슈를 해결하고 틀을 잡는거였다."),e("br"),t._v("\n이게 무슨 소리냐면 회사에서 Nuxt 를 사용할떄 마다 API 관련 세팅에서 타입 이슈가 떳다.")]),t._v(" "),e("p",[t._v("다음주 또 바빠 죽겠는데 타입 이슈 잡을 시간 조차 아끼고자 집에서 공부하면서 체계 잡기로 했다."),e("br"),t._v("\nNuxt useFetch 로 hook 함수 만들어서 사용하는 형식으로 체계를 잡았는데 또 짜증나는게 타입 이슈난다."),e("br"),t._v("\nNuxt Docs 에선 이 자식들이 사용법 적어놔서 그대로 했는데 에러떠서 따로 에러문구 읽어서 결국 해결했다. (이건 나중에 꼭 PR 올린다)")]),t._v(" "),e("p",[t._v("쨋든 그래서 해결하고 그외 프론트엔드에서 사용하는 타입을 모아두는 폴더라던지 타입 auto import 도 따로 명시했다."),e("br"),t._v("\n처음에는 types 폴더도 auto import 시키면 네이밍이 겹칠까 걱정했었는데 그럴 필요 딱히 없었다."),e("br"),t._v("\n왜냐하면 Typescript 에서 암시적으로 타입 명시는 케러셜로 표기하고 변수는 카멜로 하기 떄문이다.")]),t._v(" "),e("p",[t._v("auto import 를 해도 딱히 문제가 없다는 뜻이다! API 관련해서도 분리를 하면 끝도 없이 가능하긴한데 불편할것이다. (네이밍이)"),e("br"),t._v("\n현재는 하나의 주소에서만 API 를 가져오는데 만약 API 주소가 여러 곳이라면 또 코드 구조를 변경해야한다."),e("br"),t._v("\n하지만 아직까진 그럴일이 없기에 따로 계산하고 분리를 하진 않았는데 막상 작성해보니 그냥 해둘까 싶기도하다.")]),t._v(" "),e("p",[t._v("쨋든 분리를 하지 않은 이유는 나는 전부 auto import 로 작성하는데 단일 서버 API 면 네이밍을 단일로 하면 되는데"),e("br"),t._v("\n다수의 서버에서 API 가 날라올 경우 또 네이밍을 변경해야되서 그것이 귀찮다 폴더도 그렇고"),e("br"),t._v("\n결국엔 네이밍이 문제지 따로 그때 되서 크게 갈아엎는 현상은 없기에 이렇게 갈려고 생각중이다.")]),t._v(" "),e("h2",{attrs:{id:"이후"}},[t._v("이후")]),t._v(" "),e("p",[t._v("이후 저녁에 샤워하고 그동안 일지 작성하고 잤다."),e("br"),t._v("\n다음주는 2일은 PT 가고 2일은 학교가서 하루는 군대친구랑 저녁먹는다"),e("br"),t._v("\n다다음주도 비슷한데 하루는 저녁 회식 간다. 평일은 이제 시간이 꽉찼다.")]),t._v(" "),e("p",[t._v("이번주는 다음 운동 열심히 한 것 같다. 주말에 시간관리 엉성하게 한 것 빼고 다 좋았다.")])])}),[],!1,null,null,null);e.default=_.exports}}]);